{"name":"Foodpoint","tagline":"Connecting local farmers and local people on an easy to use platform","body":"![](http://i.imgur.com/4BOISVB.png)\r\n![](http://i.imgur.com/b8H2Beu.png)\r\n![](http://i.imgur.com/i2RXhJM.png)\r\n\r\n### Authors\r\nDiva Hurtado: Project Manager, Designer\r\n\r\nBrian Wang: iOS, Firebase, Google Maps\r\n\r\nMatt O'Hagan: FireBase, NodeJS, SendGrid\r\n\r\nTrevor Overman: NodeJS, SendGrid\r\n\r\n### Description\r\nHackDuke Project (November 2014)\r\n\r\nFood deserts are areas in the United States where it is difficult for citizens to buy local groceries because of a lack of transportation, and a lack of local grocery stores. That is why we decided to build FoodPoint, a connected platform bringing local farmers and local people who are in need, together.\r\n\r\n### Technologies\r\nObjective-C, Google Maps API, FireBase API, NodeJS, JSON, SendGrid API\r\n\r\n### How it works\r\nBuyers who wish to find local food in their area would simply press the Buy button, enter in their name and email information, and their position in the world will be logged. In addition, Buyers have the option to be added to the list of a preexisting Farmer's Market, allowing Farmers to determine which areas are the most populated areas to sell. Buyers will receive updates from that particular trending farmer's market when the market has reached more than a certain number of farmers. On the other hand, sellers/farmers press the Sell Button and enter in their name and email information. They not only will be able to see every buyer's location, but preexisting markets that they can join. Once they join a preexisting market, a confirmation email is sent to them.\r\n\r\nWe used the iOS as the native application platform. We used FireBase's API to store the informations about Buyers, Sellers, and Markets, as well as the latitude and longitude of each object. We also used a Node.js server to not only process the FireBases's data and remove any unnecessary data, but be the intermediate step to sending emails through the SendGrid API. To make an email call, the iPhone stores a request full of information about the event and the person is attending the event. This data is stored into Firebase which is immediately tracked by our Node.js server that parses the information, sends an email to the recipients, and then deletes the request from Firebase after it is done. It was a tedious process but we were able to complete it.\r\n\r\n### Our Thoughts\r\nBefore the Hackathon, we went around and asked our professors what the biggest problem was for impoverished communities. A large number of them responded: \"Food Deserts\". After a bit of research, we realized that this is actually a huge problem for low income areas in America. So if people don't have the transportation means to get food, then the solution is to bring the food to the people. That is why we came up with FoodPoint, in order to automate the process of bringing food to the people.\r\n\r\nInitially we wanted this to be a fully automatic comprehensive application, but then we realized all of the obstacles that came with establishing Farmer's markets. We have to rent out space, start the legal process, and organize other miscellaneous essentials for a Farmer's market. In the end, the goal of our application was to collect data, allow farmers to establish and join markets, and allow buyers to join markets as well. In a 24 hour period, we did all that we could in terms of functionality.\r\n\r\nOne of the biggest challenges was perhaps getting the current location services to work on Google Maps. Supposedly when you open the app, you are automatically shown your current position. However, because of iOS 8, developers now have to add 2 lines to the end of the projects info.plist to activate the locations authentication and enable location services. Brian didn't realize this after 3 hours of researching for answers.\r\n\r\nThe second biggest challenge was the Firebase API. we had some massive issues with parsing because even though we would think that raw String data would go into the Firebase server, it always ended up looking like a weird reference to a UIWindow or a completion block address. We are still working on this problem, albeit it isn't a significant blow to our project.\r\n\r\nAnother big problem was getting the Sendgrid API to work. at one point it was not sending any emails, and at another point it was sending way too many. It was extremely fragile to handle the \"real-time changes\" that Firebase allowed us to utilize because the changes were constantly being called. We solved that by implementing rules for Firebase in the security section. We restricted the message calls by only writing when data exists and if there is new data: \".write\": \"!data.exists() && newData.child('from').val() == auth.email\".\r\n\r\nOverall the project was very difficult, perhaps one of the largest projects that we've ever done. Even if it isn't exactly perfect, we learn so much from our experiences with the 3 APIs that it was worth working all night at HackDuke for.\r\n\r\n### Support or Contact\r\nDiva Hurtado\r\n - Email: \r\n - LinkedIn: www.linkedin.com/in/divahurtado\r\n - GitHub: \r\n\r\nBrian Wang \r\n - Email: brianwang9100@gmail.com\r\n - LinkedIn: www.linkedin.com/in/brianwang9100\r\n - GitHub: www.github.com/brianwang9100\r\n\r\nMatt O'Hagan\r\n - Email: ohaganmatt@gmail.com\r\n - LinkedIn: \r\n - GitHub: https://github.com/mattohagan\r\n\r\nTrevor Overman\r\n - Email: troverman@gmail.com\r\n - LinkedIn: https://www.linkedin.com/in/troverman\r\n - GitHub: https://github.com/troverman\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}